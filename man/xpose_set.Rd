% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xpdb_set.R
\name{xpose_set}
\alias{xpose_set}
\title{Generate a set of \code{xpdb} objects}
\usage{
xpose_set(..., .relationships = NULL)
}
\arguments{
\item{...}{<\code{\link[rlang:dyn-dots]{dynamic-dots}}> \verb{xpdb1, xpdb2, ...} A set of \code{xpdb} objects to be combined into a set.}

\item{.relationships}{<\code{\link{list}}> A list of relationships between the \code{xpdb} objects. (see Details)}
}
\value{
A list of class \code{xpose_set}
}
\description{
This function generates a set of xpose data (\code{xpdb}) objects that
can be used to define relationships between models. The
}
\details{
Beyond just a list of \code{xpdb} objects, an \code{xpose_set} adds hierarchical information.

When using \code{relationships}, the list should be named based on the either the variables passed as
\code{xpdb} objects or the arguments used to pass the
}
\examples{
data("xpdb_ex_pk", package = "xpose")

# Arbitrary copy
xpdb_ex_pk2 <- xpdb_ex_pk

# Simplest call
set1 <- xpose_set(xpdb_ex_pk, xpdb_ex_pk2)

# With predefined relationships
set2 <- xpose_set(xpdb_ex_pk, xpdb_ex_pk2,
  .relationships = list(xpdb_ex_pk2 = list(parent = xpdb_ex_pk))
  )

# With custom labels
set3 <- xpose_set(mod1 = xpdb_ex_pk, mod2 = xpdb_ex_pk2,
  .relationships = list(mod2 = list(parent = mod1))
  )

# Alternative set3 using [rlang::dyn-dots]
mod_list <- list(
  mod1 = xpdb_ex_pk,
  mod2 = xpdb_ex_pk2
)
mod_rels <- list(
  mod2 = list(parent = mod1)
)
set3b = xpose_set(!!!mod_list, .relationships = mod_rels)

}
